#!/usr/bin/env ruby
#-------------------------------------------------------------------------------------------------------------
#  Sifttter Redux
#
#  A modification of Craig Eley's Sifttter that allows for smart installation on a standalone *NIX
#  device (such as a Raspberry Pi).
#
#  Sifttter copyright Craig Eley 2014 <http://craigeley.com>
#
#  Copyright (c) 2014
#  Aaron Bach <bachya1208@gmail.com>
#  
#  Permission is hereby granted, free of charge, to any person
#  obtaining a copy of this software and associated documentation
#  files (the "Software"), to deal in the Software without
#  restriction, including without limitation the rights to use,
#  copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following
#  conditions:
#  
#  The above copyright notice and this permission notice shall be
#  included in all copies or substantial portions of the Software.
#  
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#  OTHER DEALINGS IN THE SOFTWARE.
#-------------------------------------------------------------------------------------------------------------

require 'colored'
require 'date'
require 'erb'
require 'fileutils'
require 'gli'
require 'singleton'
require 'time'
require 'yaml'

#|  ======================================================
#|  CONSTANTS
#|  Don't change these unless you really know
#|  what you're doing.
#|  ======================================================
DEFAULT_SRD_CONFIG_FILE = File.join(ENV['HOME'], '.sifttter_redux')

DEFAULT_DBUPLOADER_CONFIG_FILE = File.join(ENV['HOME'], '.dropbox_uploader')
DEFAULT_DBUPLOADER_LOCATION_BASE = "/usr/local/opt"

DEFAULT_SIFTTTER_DESTINATION_LOCATION = File.join(ENV['HOME'], 'sifttter')
DEFAULT_SIFTTTER_SOURCE_LOCATION = "/Apps/ifttt/sifttter"

DEFAULT_DAYONE_DESTINATION_PATH = "/Apps/Day\\ One/Journal.dayone/entries"
DEFAULT_DAYONE_SOURCE_PATH = File.join(DEFAULT_SIFTTTER_DESTINATION_LOCATION, 'dayone')

VERSION = 0.1

#|  ======================================================
#|  OS Module
#|  Module to easily find the running operating system
#|  ======================================================

module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
   (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end
end

#|  ======================================================
#|  CliManager Module
#|  Singleton to manage common CLI interfacing
#|  ======================================================
module CliMessage
  def self.error(message)
    puts "---> ERROR: #{message}".red
  end
  
  def self.info(message)
    puts "---> INFO: #{message}".blue
  end
  
  def self.prompt(message, default)
    print "#{message} [default: #{default}]: "
    choice = $stdin.gets.chomp
    if choice.empty?
      return default
    else
      return choice
    end
  end
  
  def self.section(message)
    puts "### #{message}".green
  end
  
  def self.warning(message)
    puts "---> WARNING: #{message}".yellow
  end
end

#|  ======================================================
#|  ConfigManager Class
#|  Singleton to manage the YAML config file
#|  for this script
#|  ======================================================
class ConfigManager
  include Singleton
  
  attr_accessor :configFile
  
  def initialize
    @configFile = DEFAULT_SRD_CONFIG_FILE
    
    if File.exists?(DEFAULT_SRD_CONFIG_FILE) 
      @data = YAML.load_file(DEFAULT_SRD_CONFIG_FILE)
      @data.each do |k, v|
        define_singleton_method(k) { return v }
      end
    else
      @data = {}
    end
  end
  
  def _dump
    puts @data
  end
  
  def add_to_section(hash, section)
    unless @data.has_key?(section)
      CliMessage.warning("Attempting to insert into a non-existing section: #{section}; skipping...")
      return 
    end
    
    @data[section].merge!(hash)
  end
  
  def create_section(section)
    if @data.has_key?(section)
      CliMessage.warning("Attempting to create existing section (#{section}); skipping...")
      return
    end

    define_singleton_method(section) { return @data[section] }
    @data.merge!(section => {})
  end
  
  def delete_section(section)
    unless @data.has_key?(section)
      CliMessage.warning("Attempting to delete non-existing section (#{section}); skipping...")
      return
    end
    
    remove_singleton_method(section)
    @data.delete(section)
  end
  
  def remove_from_section(key, section)
    unless @data.has_key?(section) && @data[section].has_key?(key)
      CliMessage.warning("Attempting to remove a non-existing key: #{section}.#{key}; skipping...")
      return
    end
    
    @data[section].delete(key)
  end
  
  def reset
    @data = {}
  end
  
  def save_configuration
    return File.open(@configFile, 'w') { |f| f.write(@data.to_yaml) }
  end
  
end

#|  ------------------------------------------------------
#|  Collect preferences
#|  ------------------------------------------------------
def collect_preferences
  CliMessage.section('COLLECTING PREFERENCES...')
  
  pref = CliMessage.prompt("Location for downloaded Sifttter files from Dropbox", DEFAULT_SIFTTTER_DESTINATION_LOCATION)
  $config.add_to_section({"sifttter_destination_location" => pref}, "sifttter_redux")
  
  pref = CliMessage.prompt("Location of Sifttter files in Dropbox", DEFAULT_SIFTTTER_SOURCE_LOCATION)
  $config.add_to_section({"sifttter_source_location" => pref}, "sifttter_redux")
  
  pref = CliMessage.prompt("Location of Day One files in Dropbox", DEFAULT_DAYONE_DESTINATION_PATH)
  $config.add_to_section({"dayone_source_location" => pref}, "sifttter_redux")
end

#|  ------------------------------------------------------
#|  String replacement method from original Sifttter
#|  ------------------------------------------------------
def e_sh(str)
	str.to_s.gsub(/(?=["\\])/, '\\')
end

#|  ------------------------------------------------------
#|  Initialization procedures
#|  ------------------------------------------------------
def initialize_procedures
  $config.reset
  $config.create_section("sifttter_redux")
  $config.add_to_section({"config_location" => $config.configFile}, "sifttter_redux")
  
  install_db_uploader 
  collect_preferences
  
  CliMessage.section("INITIALIZATION FINISHED")
  
  $config.save_configuration
end

#|  ------------------------------------------------------
#|  Installs Dropbox Uploader from Github
#|  ------------------------------------------------------
def install_db_uploader
  valid_directory_chosen = false
  
  CliMessage.section('DOWNLOADING DROPBOX UPLOADER...')
  
  # Create a new configuration section for Dropbox-Uploader
  $config.create_section("db_uploader")
  
  until valid_directory_chosen
    # Prompt the user for a location to save Dropbox Uploader. "
    db_uploader_location = CliMessage.prompt("Location for Dropbox-Uploader", DEFAULT_DBUPLOADER_LOCATION_BASE)
    db_uploader_location.chop! if db_uploader_location.end_with?('/')
    db_uploader_location = "/usr/local/opt" if db_uploader_location.empty?
    
    # If the entered directory exists, clone the repository.
    if File.directory?(db_uploader_location)
      valid_directory_chosen = true
      db_uploader_location << "/Dropbox-Uploader"
      
      # If, for some reason, Dropbox Uploader alread exists at this location,
      # skip the clone.
      if File.directory?(db_uploader_location)
        CliMessage.info("You seem to already have Dropbox Uploader at this location; skipping...")
      else
        %x{git clone https://github.com/andreafabrizi/Dropbox-Uploader.git #{db_uploader_location}}
      end
      
      # Save config data to YAML.
      $config.add_to_section({"install_location" => db_uploader_location}, "db_uploader")
    else
      puts "Sorry, but #{db_uploader_location} isn't a valid directory."
    end
  end
end

def run_sifttter
  # Sifttter: An IFTTT-to-Day One Logger by Craig Eley 2014 <http://craigeley.com>
  # Based on tp-dailylog.rb by Brett Terpstra 2012 <http://brettterpstra.com>
  # 
  # Notes:
  # * Uses `mdfind` to locate a specific folder of IFTTT-generated text files changed in the last day
  # * The location of your folder should be hardcoded in line 53
  # * Scans leading timestamps in each line matching today's date
  # * Does not alter text files in any way
  # * Changes ampersand ('&') to 'and' so the script keeps running
  # * Does not require the Day One CLI tool
  # * Only generates report if there are completed tasks found
  # * Compiles all results into a single Day One entry
  # * It's configured to locate a Dropbox-synced journal, so
  # * If you use iCloud you'll can just uncomment lines 26 and 27, and comment line 28
  # * To set the Day One entries to starred, just change `starred = false` to true on line 24
  
  uuid_command = "uuidgen" if OS.mac?
  uuid_command = "uuid" if OS.linux?
  uuid = %x{#{uuid_command}}.gsub(/-/,'').strip 
  
  datestamp = Time.now.utc.iso8601
  starred = false

  template = ERB.new <<-XMLTEMPLATE
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
  	<key>Creation Date</key>
  	<date><%= datestamp %></date>
  	<key>Entry Text</key>
  	<string><%= entrytext %></string>
  	<key>Starred</key>
  	<<%= starred %>/>
  	<key>Tags</key>
  	<array>
  		<string>daily logs</string>
  	</array>
  	<key>UUID</key>
  	<string><%= uuid %></string>
  </dict>
  </plist>
  XMLTEMPLATE

  today_padded = Time.now().strftime('%B %d, %Y')
  today_no_padded = Time.now().strftime('%B %-d, %Y')
  cdate = Time.now().strftime('%m/%d/%Y')
  files = %x{find #{DEFAULT_SIFTTTER_DESTINATION_LOCATION)} -type f -name '*.txt' | grep -v -i daily | sort}

  projects = []
  files.split("\n").each do |file|
  	if File.exists?(file.strip)
  		f = File.open(file.strip, encoding: 'UTF-8')
  		lines = f.read
  		f.close
  		project = "### " + File.basename(file).gsub(/^.*?\/([^\/]+)$/,"\\1") + "\n"

  		found_completed = false
  		lines.each_line do |line|
  			if line =~ /&/
  				line.gsub!(/[&]/, 'and')
  			end
  			if line =~ /#{today_padded}/
  				found_completed = true
  				project += line.gsub(/@done/,'').gsub(/#{today_padded}.../,'').strip + "\n"
  			end
  			if line =~ /#{today_no_padded}/
  				found_completed = true
  				project += line.gsub(/@done/,'').gsub(/#{today_no_padded}.../,'').strip + "\n"
  			end
  		end
  	end
  	if found_completed
  		projects.push(project)
  	end
  end
  
  if projects.length <=0
  	abort "No entries found"
  end

  if projects.length > 0
  	entrytext = "# Things done on #{today_padded}\n\n"
  	projects.each do |project|
  		entrytext += project.gsub(/.txt/, ' ') + "\n\n"
  	end
    
    FileUtils.rm_rf(DEFAULT_DAYONE_SOURCE_PATH) if Dir.exists?(DEFAULT_DAYONE_SOURCE_PATH)
    Dir.mkdir(DEFAULT_DAYONE_SOURCE_PATH)
    
  	fh = File.new(File.expand_path(DEFAULT_DAYONE_SOURCE_PATH + "/" + uuid + ".doentry"), 'w+')
  	fh.puts template.result(binding)
  	fh.close
  	puts "Entry logged for #{today_padded}"
  end
  
end

#|  ======================================================
#|  MAIN
#|  ======================================================
include GLI::App
$config = ConfigManager.instance

# Set the description as it will be displayed in the help message
program_desc "Sifttter Redux v#{VERSION}

    A modification of Craig Eley's Sifttter that allows for smart
    installation on a standalone *NIX device (such as a Raspberry Pi)."

pre do |global_options, command, options, args|
  if !File.exists?(DEFAULT_SRD_CONFIG_FILE)
    CliMessage.info("It doesn't look like you've initlized Sifttter Redux yet. Doing that now...")
    initialize_procedures
  end
  
  $db_uploader = File.join($config.db_uploader["install_location"], "dropbox_uploader.sh")
end

desc 'Execute the script'
command :exec do |c|
  c.action do |global_options, options, args|
    CliMessage.section('EXECUTING...')
    
    CliMessage.info('Launching Dropbox-Uploader...')
    
    FileUtils.rm_rf(DEFAULT_SIFTTTER_DESTINATION_LOCATION) if Dir.exists?(DEFAULT_SIFTTTER_DESTINATION_LOCATION)
    system "#{$db_uploader} download #{DEFAULT_SIFTTTER_SOURCE_LOCATION} #{DEFAULT_SIFTTTER_DESTINATION_LOCATION}"
    run_sifttter
    system "#{$db_uploader} upload #{DEFAULT_DAYONE_SOURCE_PATH + "/*"} #{$config.sifttter_redux["dayone_source_location"]}"
  end
end

desc 'Install and initialize dependencies'
command :init do |c|
  c.action do |global_options, options, args|
    CliMessage.section('INITIALIZING...')

    if File.exists?($config.configFile)
      optionReinitialize = CliMessage.prompt("It looks like you've already initialized Sifttter Redux. Do you want to re-initialize?", "N").downcase
      initialize_procedures if optionReinitialize == 'y'
    else
      initialize_procedures
    end
  end
end

exit run(ARGV)