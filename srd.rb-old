#!/usr/bin/env ruby
#-------------------------------------------------------------------------------------------------------------
#  Sifttter Redux
#
#  A modification of Craig Eley's Sifttter that allows for smart installation on a standalone *NIX
#  device (such as a Raspberry Pi).
#
#  Sifttter copyright Craig Eley 2014 <http://craigeley.com>
#
#  Copyright (c) 2014
#  Aaron Bach <bachya1208@gmail.com>
#  
#  Permission is hereby granted, free of charge, to any person
#  obtaining a copy of this software and associated documentation
#  files (the "Software"), to deal in the Software without
#  restriction, including without limitation the rights to use,
#  copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following
#  conditions:
#  
#  The above copyright notice and this permission notice shall be
#  included in all copies or substantial portions of the Software.
#  
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#  OTHER DEALINGS IN THE SOFTWARE.
#-------------------------------------------------------------------------------------------------------------

require 'optparse'
require 'singleton'
require 'yaml'

#|
#|  CONSTANTS
#|  Don't change these unless you really know
#|  what you're doing.
#|
CONFIG_FILEPATH = "#{ENV['HOME']}/.sr-config"
SCRIPT_FILEPATH = File.expand_path File.dirname(__FILE__)
VERSION = 0.1

#|
#|  ConfigManager Class
#|  Singleton to manage the YAML config file
#|  for this script
#|
class ConfigManager
  include Singleton
  
  def initialize
    if File.exists?(CONFIG_FILEPATH) 
      @data = YAML.load_file(CONFIG_FILEPATH)
    else
      @data = {}
    end
  end
  
  def createSection(sectionName)
    if !sectionName.is_a? Symbol
      puts "--> ERROR: section name is not a symbol: #{sectionName}"
      return
    elsif @data.has_key?(sectionName)
      puts "--> WARNING: attempting to create existing section (#{sectionName}); skipping..."
    else
      @data.merge!(sectionName => {})
    end
  end
  
  def deleteSection(sectionName)
  
  end
  
  def saveConfiguration
    return File.open(CONFIG_FILEPATH, 'w') { |f| f.write(@data.to_yaml) }
  end
  
  def _dump
    puts @data
  end
  
end

# Installs Dropbox Uploader from Github
def install_db_uploader
  valid_directory_chosen = false
  
  until valid_directory_chosen
    # Prompt the user for a location to save Dropbox Uploader.
    print "Location for Dropbox-Uploader [default: /usr/local/opt]: "
    $db_uploader_location = $stdin.gets.chomp
    $db_uploader_location.chop! if $db_uploader_location.end_with?('/')
    $db_uploader_location = "/usr/local/opt" if $db_uploader_location.empty?
    
    # If the entered directory exists, clone the repository.
    if File.directory?($db_uploader_location)
      valid_directory_chosen = true
      $db_uploader_location << "/Dropbox-Uploader"
      
      # If, for some reason, Dropbox Uploader alread exists at this location,
      # skip the clone.
      if File.directory?($db_uploader_location)
        puts "You seem to already have Dropbox Uploader at this location, so we're moving on."
      else
        %x{git clone https://github.com/andreafabrizi/Dropbox-Uploader.git #{$db_uploader_location}}
      end
      
      # Save config data to YAML.
      $config_yaml.push(:dbuploader => {:name => "Dropbox Uploader", :location => $db_uploader_location})
    else
      puts "Sorry, but #{$db_uploader_location} isn't a valid directory."
    end
  end
end

options = {}

opt_parser = OptionParser.new do |opt|
  script_name = File.basename($0)
  opt.banner = "\nSifttter Redux v#{VERSION}\nAaron Bach - bachya1208@gmail.com\nUsage: #{script_name} COMMAND [PARAMETERS]..."
  opt.separator ""
  opt.separator "COMMANDS:"
  opt.separator "    #{script_name} exec\t\t\t\t\# Execute the script"
  opt.separator "    #{script_name} init\t\t\t\t\# Initialize dependencies and install"
  opt.separator "    #{script_name} help\t\t\t\t\# Show this help message"
  opt.separator ""
  opt.separator "OPTIONAL PARAMETERS:"

  opt.on("-f", "--file", "\t# Load config from a specific file") do |filepath|

  end
  
  opt.separator ""
  opt.separator "For more info and examples, please see the README file.\n"
  
end

opt_parser.parse!

case ARGV[0]
when "exec"
  
when "init"
  puts "### INITIALIZING..."
  if File.exists?(CONFIG_FILEPATH)
    print "It looks like you've already initialized Sifttter Redux. Do you want to re-initialize? (default: n) "
    reinitialize = $stdin.gets.chomp
  else
    ConfigManager.instance.createSection(:db_uploader)
    ConfigManager.instance.saveConfiguration
  end
else
  puts opt_parser
end
